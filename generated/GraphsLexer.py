# Generated from generated/Graphs.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,97,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,
        1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,
        1,9,1,9,1,10,1,10,5,10,81,8,10,10,10,12,10,84,9,10,1,11,4,11,87,
        8,11,11,11,12,11,88,1,12,4,12,92,8,12,11,12,12,12,93,1,12,1,12,0,
        0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
        48,57,3,0,9,10,13,13,32,32,99,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        1,27,1,0,0,0,3,31,1,0,0,0,5,37,1,0,0,0,7,45,1,0,0,0,9,54,1,0,0,0,
        11,61,1,0,0,0,13,70,1,0,0,0,15,72,1,0,0,0,17,74,1,0,0,0,19,76,1,
        0,0,0,21,78,1,0,0,0,23,86,1,0,0,0,25,91,1,0,0,0,27,28,5,101,0,0,
        28,29,5,110,0,0,29,30,5,100,0,0,30,2,1,0,0,0,31,32,5,103,0,0,32,
        33,5,114,0,0,33,34,5,97,0,0,34,35,5,112,0,0,35,36,5,104,0,0,36,4,
        1,0,0,0,37,38,5,101,0,0,38,39,5,120,0,0,39,40,5,116,0,0,40,41,5,
        101,0,0,41,42,5,110,0,0,42,43,5,100,0,0,43,44,5,115,0,0,44,6,1,0,
        0,0,45,46,5,97,0,0,46,47,5,100,0,0,47,48,5,100,0,0,48,49,5,32,0,
        0,49,50,5,110,0,0,50,51,5,111,0,0,51,52,5,100,0,0,52,53,5,101,0,
        0,53,8,1,0,0,0,54,55,5,109,0,0,55,56,5,111,0,0,56,57,5,100,0,0,57,
        58,5,105,0,0,58,59,5,102,0,0,59,60,5,121,0,0,60,10,1,0,0,0,61,62,
        5,115,0,0,62,63,5,101,0,0,63,64,5,116,0,0,64,65,5,32,0,0,65,66,5,
        101,0,0,66,67,5,100,0,0,67,68,5,103,0,0,68,69,5,101,0,0,69,12,1,
        0,0,0,70,71,5,91,0,0,71,14,1,0,0,0,72,73,5,58,0,0,73,16,1,0,0,0,
        74,75,5,93,0,0,75,18,1,0,0,0,76,77,5,42,0,0,77,20,1,0,0,0,78,82,
        7,0,0,0,79,81,7,1,0,0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,
        82,83,1,0,0,0,83,22,1,0,0,0,84,82,1,0,0,0,85,87,7,2,0,0,86,85,1,
        0,0,0,87,88,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,24,1,0,0,0,90,
        92,7,3,0,0,91,90,1,0,0,0,92,93,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,
        0,94,95,1,0,0,0,95,96,6,12,0,0,96,26,1,0,0,0,4,0,82,88,93,1,6,0,
        0
    ]

class GraphsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    ID = 11
    INT = 12
    White_spaces = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'end'", "'graph'", "'extends'", "'add node'", "'modify'", "'set edge'", 
            "'['", "':'", "']'", "'*'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "White_spaces" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "ID", "INT", "White_spaces" ]

    grammarFileName = "Graphs.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


